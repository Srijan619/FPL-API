{"version":3,"sources":["components/DataFetch/DataFetcher.js","components/srijan/index.js","components/points/Index.js","components/App.js","serviceWorker.js","index.js"],"names":["index","props","state","isLoading","error","details","userDetails","email","password","details_individual","c","hex","Math","floor","random","toString","String","substr","this","loginFPL","fetchDetailsData","setState","h","Headers","append","encoded","window","btoa","console","log","response","fetch","method","headers","credentials","json","currentValue","myArray","standings","results","fetchInitialData","data","CustomData","unresolvedPromise","map","items","entry","then","res","ok","Error","posts","formatData","id","name","player_name","color","get_random_color","current","push","catch","Promise","all","children","Component","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","ProgressIcon","height","width","cx","cy","r","fill","classes","DataFetcher","style","message","className","Typography","variant","gutterBottom","align","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableBody","row","key","last_rank","rank","scope","event_total","total","margin","spacing","Index","show","setTimeout","dataKey","tick","allowDuplicatedCategory","item","type","stroke","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf889ff2.chunk.js","sourcesContent":["import { Component } from 'react';\n\n\nconst loginURL=\"https://fantasy.premierleague.com/\"\n\nconst League_Url = \"https://fantasy.premierleague.com/api/leagues-classic/407866/standings/?page_new_entries=1&page_standings=1&phase=1\";\n\nclass index extends Component {\n \n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            error: null,\n            details: [],\n            userDetails:[{email:\"chapssrijan@gmail.com\",password:\"DONTangryME123\"}],\n            details_individual: [],\n        };\n      \n    }\n    get_random_color() {\n        function c() {\n            var hex = Math.floor(Math.random() * 256).toString(16);\n            return (\"0\" + String(hex)).substr(-2); // pad with zero\n        }\n        return \"#\" + c() + c() + c();\n    }\n   async componentDidMount() {\n       this.loginFPL()\n       await this.fetchDetailsData();\n       this.setState({isLoading:false})\n\n    }\n    loginFPL(){\n        let h=new Headers();\n        h.append('Access-Control-Allow-Origin','*')\n        h.append('Accept','application/json')\n        let encoded=window.btoa('chapssrijan@gmail.com:DONTangryME123');\n        console.log(encoded)\n        h.append('Authorization','Basic '+encoded )\n        const response=fetch(loginURL,{\n            method:\"GET\",\n            headers:h,\n            credentials:'include'\n            \n        });\n      console.log(response)\n    }\n\n\n    async fetchInitialData() {\n        this.setState({ isLoading: true })\n        const response=await fetch(League_Url);\n        const currentValue=await response.json();\n        const myArray=currentValue.standings.results\n\n        this.setState({\n            details:myArray,error:response.error\n        })\n        return await myArray\n     \n      \n    }\n\n    async fetchDetailsData() {\n        const data = await this.fetchInitialData();\n        let CustomData=[];\n        const unresolvedPromise=data.map(items => {\n            this.setState({ isLoading: true })\n            fetch(`https://fantasy.premierleague.com/api/entry/${items.entry}/history/`)\n            .then(res => {\n                if (res.ok) {\n                   \n                    return res.json()\n                } else {\n                    throw Error(\"Error fetching data!\")\n                }\n            })\n            .then(posts => {\n                let formatData = {\n                    id: items.entry,\n                    name:items.player_name,\n                    color: this.get_random_color(),\n                    data: posts.current\n                }\n               CustomData.push(formatData)\n            })\n            .catch(error => this.setState({\n                error: error\n            }))\n        })\n       \n        await Promise.all(unresolvedPromise)\n        await this.setState({\n            details_individual: CustomData\n        })\n    }\n\n\n    render() {\n        return this.props.children(this.state)\n\n    }\n}\n\nexport default (index);","import React, { Component } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\n\nimport DataFetcher from '../DataFetch/DataFetcher'\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\nconst useStyles = theme => ({\n    root: {\n        margin: theme.spacing(1),\n        width: 'fit-content'\n    },\n\n});\n\nfunction ProgressIcon(props) {\n    return (\n        <svg height=\"20\" width=\"20\">\n            <circle cx=\"10\" cy=\"15\" r=\"5\" fill={props.color} />\n        </svg>\n    );\n}\n\nclass index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <DataFetcher>\n                {({ error, isLoading, details }) => {\n                    if (error) {\n                        return <p style={{ color: \"red\" }}>{error.message}</p>\n                    }\n                    if (isLoading) {\n                        return <p>Loading data....</p>\n                    }\n             \n                    return (\n                        <div className={classes.root}>\n                          \n                            <Typography variant=\"h5\" gutterBottom color=\"primary\" align=\"center\">Kokkola Cup</Typography>\n                            <TableContainer component={Paper}>\n                                <Table size=\"small\" aria-label=\"simple table\" >\n                                    <TableHead className={classes.head}>\n                                        <TableRow>\n                                            <StyledTableCell>Rank</StyledTableCell>\n                                            <StyledTableCell>Manager</StyledTableCell>\n                                            <StyledTableCell align=\"right\">GameWeek</StyledTableCell>\n                                            <StyledTableCell align=\"right\">Total Points</StyledTableCell>\n\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {details.map(row => (\n                                            <StyledTableRow key={row.id}>\n                                                <StyledTableCell >{(row.last_rank < row.rank) ? (<ProgressIcon color=\"red\"></ProgressIcon>) : (row.last_rank === row.rank) ? (<ProgressIcon color=\"grey\"></ProgressIcon>) : (row.last_rank > row.rank) ? (<ProgressIcon color=\"green\"></ProgressIcon>) : null}\n                                                    {row.rank}</StyledTableCell>\n                                                <StyledTableCell component=\"th\" scope=\"row\">\n                                                    {row.player_name}\n                                                </StyledTableCell>\n                                                <StyledTableCell align=\"right\">{row.event_total}</StyledTableCell>\n                                                <StyledTableCell align=\"right\">{row.total}</StyledTableCell>\n                                            </StyledTableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n\n                        </div>\n                    )\n                }}\n            </DataFetcher>\n        )\n\n\n    }\n}\n\nexport default withStyles(useStyles)(index);","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Typography from '@material-ui/core/Typography'\nimport DataFetcher from '../DataFetch/DataFetcher'\n\n\nconst useStyles = theme => ({\n    root: {\n        margin: theme.spacing(1),\n        width: '100%',\n        height: '100%'\n    },\n\n});\n\n\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => this.setState({ show: true }), 2000)\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { show } = this.state;\n\n        return (\n\n            <DataFetcher >\n                {({ error, isLoading, details_individual }) => {\n\n                    if (error) {\n                        return <p style={{ color: \"red\" }}>{error.message}</p>\n                    }\n                    if (isLoading) {\n                        return <p style={{ align:\"center\"}}>Loading data....</p>\n                    }\n                    if (show) {\n\n                        return (\n                            <div className={classes.root}>\n                                <Typography variant=\"h5\" gutterBottom color=\"primary\" align=\"center\">Chart</Typography>\n\n                              \n                                <ResponsiveContainer width=\"95%\" height={400}>\n                                <LineChart >\n\n                                <XAxis dataKey=\"event\" tick={false} allowDuplicatedCategory={false} />\n                                <YAxis dataKey=\"points\" />\n                                <Tooltip />\n                                <Legend />\n\n                             {details_individual.map(item=>(<Line type=\"monotone\" dataKey=\"points\" data={item.data} name={item.name} key={item.id} stroke={item.color} />))} \n                            </LineChart>\n                        </ResponsiveContainer> \n                            </div>\n                        )\n                    }\n                    return (\n                        <div>Loading data....</div>\n                    )\n                }}\n            </DataFetcher>)\n\n\n    }\n}\n\nexport default withStyles(useStyles)(Index);","import React from 'react';\nimport './App.css';\nimport Srijan from './srijan';\nimport Points from  './points/Index.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Srijan></Srijan>\n      <Points></Points>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}