{"version":3,"sources":["components/DataFetch/DataFetcher.js","components/Table/index.js","components/Winner/index.js","components/Chart/Index.js","components/App.js","serviceWorker.js","index.js"],"names":["proxyUrl","index","props","state","isLoading","error","details","details_individual","winners","c","hex","Math","floor","random","toString","String","substr","this","fetchDetailsData","setState","fetch","response","json","currentValue","myArray","standings","results","fetchInitialData","data","CustomData","unresolvedPromise","map","items","entry","then","res","ok","Error","posts","formatData","id","name","player_name","color","get_random_color","current","push","catch","Promise","all","setTimeout","findWinners","cparray","total_gameWeek","length","event_winner","filtered_data","gameweek_id","Array","from","keys","all_winners","ids","item","points","points_after_transfers","gameWeek","maxValue","max","apply","o","find","console","log","children","Component","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","ProgressIcon","height","width","cx","cy","r","fill","classes","total_gw","DataFetcher","style","message","CircularProgress","className","loading","Typography","variant","gutterBottom","align","TableContainer","component","Paper","container","Table","size","aria-label","TableHead","TableBody","row","key","last_rank","rank","scope","event_total","parseInt","total","margin","spacing","padding","maxHeight","show","stickyHeader","winner","Index","table_wrapper","Winner","dataKey","tick","allowDuplicatedCategory","type","stroke","display","justifyContent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a07dcaa.chunk.js","sourcesContent":["import { Component } from 'react';\n\nconst proxyUrl = 'https://cors-anywhere.herokuapp.com/'\nconst loginURL = \"https://fantasy.premierleague.com/\"\n\nconst League_Url = \"https://fantasy.premierleague.com/api/leagues-classic/407866/standings/?page_new_entries=1&page_standings=1&phase=1\";\n\nclass index extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            error: null,\n            details: [],\n            details_individual: [],\n            winners: []\n        };\n\n    }\n    get_random_color() {\n        function c() {\n            var hex = Math.floor(Math.random() * 256).toString(16);\n            return (\"0\" + String(hex)).substr(-2); // pad with zero\n        }\n        return \"#\" + c() + c() + c();\n    }\n    async componentDidMount() {\n        //this.loginFPL()\n        await this.fetchDetailsData();\n        this.setState({ isLoading: false })\n\n\n    }\n    // loginFPL(){\n\n    //     let h=new Headers();\n    //     h.append(\"Access-Control-Allow-Headers\", 'Origin,X-Requested-With,Content-Type,Accept,content-type,application/json')\n    //     let encoded=window.btoa('chapssrijan@gmail.com:DONTangryME123');\n    //     console.log(encoded)\n    //     h.append('Authorization','Basic '+encoded )\n    //     const response=fetch(proxyUrl+loginURL,{\n    //         method:\"GET\",\n    //         headers:h,\n    //         credentials:'include'\n\n    //     });\n    //   console.log(response)\n    // }\n\n\n    async fetchInitialData() {\n        this.setState({ isLoading: true })\n        const response=await fetch(proxyUrl+League_Url);\n        //const response = await fetch(League_Url);\n        const currentValue = await response.json();\n        const myArray = currentValue.standings.results\n\n        this.setState({\n            details: myArray, error: response.error\n        })\n        return await myArray\n\n\n    }\n\n    async fetchDetailsData() {\n\n        const data = await this.fetchInitialData();\n        let CustomData = [];\n        const unresolvedPromise = data.map(items => {\n            this.setState({ isLoading: true })\n            fetch(proxyUrl+`https://fantasy.premierleague.com/api/entry/${items.entry}/history/`)\n            //fetch(`https://fantasy.premierleague.com/api/entry/${items.entry}/history/`)\n\n                .then(res => {\n                    if (res.ok) {\n\n                        return res.json()\n                    } else {\n                        throw Error(\"Error fetching data!\")\n                    }\n                })\n                .then(posts => {\n                    let formatData = {\n                        id: items.entry,\n                        name: items.player_name,\n                        color: this.get_random_color(),\n                        data: posts.current\n                    }\n                    CustomData.push(formatData)\n                })\n                .catch(error => this.setState({\n                    error: error\n                }))\n        })\n\n        await Promise.all(unresolvedPromise)\n        this.setState({\n            details_individual: CustomData\n        })\n\n        setTimeout(() => { this.findWinners() }, 2000)\n\n    }\n\n    findWinners() {\n\n        const cparray = this.state.details_individual; //Making a copy of the details \n        const total_gameWeek=cparray[0][\"data\"].length //To get total gameweeks\n     \n        let event_winner = []\n        let filtered_data = []\n        let gameweek_id =Array.from(Array(total_gameWeek).keys()) //Array to loop through all gameweek\n        let all_winners = []\n        gameweek_id.map(ids=>{\n            cparray.map((item) => {\n                const i = item[\"data\"]\n    \n                i.map(points => {\n                                     \n                        if ((points[\"event\"] === (ids+1))) {\n                            const points_after_transfers = (points[\"points\"]) - (points[\"event_transfers_cost\"])\n                            const id = (item[\"id\"])\n                            const name = (item[\"name\"])\n                            const gameWeek = points[\"event\"]\n                            event_winner.push({ id: id, name: name, points: points_after_transfers, gameWeek: gameWeek }) //Formatted data\n    \n                            \n                        }\n                })\n    \n    \n            })\n    \n            const maxValue = Math.max.apply(Math, event_winner.map(function (o) { return o.points; })) //Finds max value\n            filtered_data = (event_winner.find(item => item.points === maxValue)) // Finds the winner object\n            all_winners.push(filtered_data)\n            event_winner = []\n            filtered_data=[]\n        })\n        console.log(all_winners)\n        this.setState({ winners: all_winners }) //Setting the data\n    }\n\n\n    render() {\n        return this.props.children(this.state)\n\n    }\n}\n\nexport default (index);","import React, { Component } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport DataFetcher from '../DataFetch/DataFetcher'\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\nconst useStyles = theme => ({\n    root: {\n        margin: theme.spacing(1),\n        width: 'fit-content'\n    },\n    loading: {\n       margin:'auto',\n       width:'10%',\n       padding:theme.spacing(2)\n      },\n    container: {\n\n        maxHeight: 400,\n      },\n\n});\n\nfunction ProgressIcon(props) {\n    return (\n        <svg height=\"20\" width=\"20\">\n            <circle cx=\"10\" cy=\"15\" r=\"5\" fill={props.color} />\n        </svg>\n    );\n}\n\nclass index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n\n    render() {\n        const { classes } = this.props;\n        let total_gw=0;\n        return (\n            <DataFetcher>\n                {({ error, isLoading, details}) => {\n                    if (error) {\n                        return <p style={{ color: \"red\" }}>{error.message}</p>\n                    }\n                    if (isLoading) {\n                        return <CircularProgress  className={classes.loading}/>\n                    }\n                    total_gw=this.props.data[0][\"data\"].length\n                    return (\n                        \n                        <div className={classes.root}>\n                       \n                            <Typography variant=\"h5\" gutterBottom color=\"primary\" align=\"center\">Kokkola Cup</Typography>\n                            <TableContainer component={Paper} className={classes.container}>\n                                <Table size=\"small\" aria-label=\"simple table\" >\n                                    <TableHead className={classes.head}>\n                                        <TableRow>\n                                            <StyledTableCell>Rank</StyledTableCell>\n                                            <StyledTableCell>Manager</StyledTableCell>\n                                            <StyledTableCell align=\"right\">GameWeek</StyledTableCell>\n                                            <StyledTableCell align=\"right\">Average</StyledTableCell>\n                                            <StyledTableCell align=\"right\">Total Points</StyledTableCell>\n\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {details.map(row => (\n                                            <StyledTableRow key={row.id}>\n                                                <StyledTableCell >{(row.last_rank < row.rank) ? (<ProgressIcon color=\"red\"></ProgressIcon>) : (row.last_rank === row.rank) ? (<ProgressIcon color=\"grey\"></ProgressIcon>) : (row.last_rank > row.rank) ? (<ProgressIcon color=\"green\"></ProgressIcon>) : null}\n                                                    {row.rank}</StyledTableCell>\n                                                <StyledTableCell component=\"th\" scope=\"row\">\n                                                    {row.player_name}\n                                                </StyledTableCell>\n                                                <StyledTableCell align=\"right\">{row.event_total}</StyledTableCell>\n                                                <StyledTableCell align=\"right\">{parseInt(row.total/total_gw)}</StyledTableCell>\n                                                <StyledTableCell align=\"right\">{row.total}</StyledTableCell>\n                                            </StyledTableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n\n                        </div>\n                    )\n                }}\n            </DataFetcher>\n        )\n\n\n    }\n}\n\nexport default withStyles(useStyles)(index);","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography'\nimport DataFetcher from '../DataFetch/DataFetcher'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst StyledTableCell = withStyles(theme => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.background.default,\n        },\n    },\n}))(TableRow);\nconst useStyles = theme => ({\n    root: {\n        margin: theme.spacing(1),\n        width: 'fit-content',\n    },\n    container: {\n        maxHeight: 400,\n      },\n    loading: {\n        margin: 'auto',\n        width: '10%',\n        padding: theme.spacing(2)\n    },\n\n});\n\n\nclass index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false,\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => this.setState({ show: true }), 500)\n    }\n    render() {\n        const { classes } = this.props;\n        const { show } = this.state\n        return (\n            <div>\n                <DataFetcher>\n                    {({ error, isLoading, winners }) => {\n                        if (error) {\n                            return <p style={{ color: \"red\" }}>{error.message}</p>\n                        }\n                        if (isLoading) {\n                            return <CircularProgress className={classes.loading} />\n                        }\n                        if (show) {\n\n                            return (\n                                <div className={classes.root}>\n                                    <Typography variant=\"h5\" gutterBottom color=\"primary\" align=\"center\">Winners</Typography>\n                                    <TableContainer component={Paper} className={classes.container}>\n                                        <Table stickyHeader size=\"small\" aria-label=\"simple table\" >\n                                            <TableHead className={classes.head}>\n                                                <TableRow>\n                                                    <StyledTableCell>Manager</StyledTableCell>\n                                                    <StyledTableCell align=\"right\">GameWeek</StyledTableCell>\n                                                    <StyledTableCell align=\"right\">Points</StyledTableCell>\n\n                                                </TableRow>\n                                            </TableHead>\n                                            <TableBody>\n                                                {winners.map(winner=> (\n                                                    <StyledTableRow key={winner.gameWeek}>\n                                                        <StyledTableCell component=\"th\" scope=\"row\">{winner.name}</StyledTableCell>\n                                                        <StyledTableCell component=\"th\" scope=\"row\" align=\"right\">{winner.gameWeek}</StyledTableCell>\n                                                        <StyledTableCell component=\"th\" scope=\"row\" align=\"right\">{winner.points}</StyledTableCell>\n\n\n                                                    </StyledTableRow>\n                                                ))}\n\n                                            </TableBody>\n                                        </Table>\n                                    </TableContainer>\n\n                                </div>\n                            )\n                        }\n                        return (\n                            <div className={classes.loading}>\n                                <CircularProgress />\n                            </div>\n                        )\n                    }}\n\n                </DataFetcher>\n            </div>\n        )\n\n\n    }\n}\n\nexport default withStyles(useStyles)(index);\n\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport Typography from '@material-ui/core/Typography'\nimport DataFetcher from '../DataFetch/DataFetcher'\nimport Table from '../Table';\nimport Winner from '../Winner';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nconst useStyles = theme => ({\n    root: {\n        margin: theme.spacing(1),\n        width: '100%',\n        height: '100%'\n    },\n    loading: {\n       margin:'auto',\n       width:'10%',\n       padding:theme.spacing(2)\n      },\n      table_wrapper:{\n          display:'flex',\n          justifyContent:'flex-start'\n      }\n\n});\n\n\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: false\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() => this.setState({ show: true }), 2000)\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { show } = this.state;\n\n        return (\n\n            <DataFetcher >\n                {({ error, isLoading, details_individual }) => {\n                    \n\n                    if (error) {\n                        return <p style={{ color: \"red\" }}>{error.message}</p>\n                    }\n                    if (isLoading) {\n                        return   <CircularProgress className={classes.loading}/>\n                    }\n                    \n                    if (show) {\n\n                        return (\n                            <div className={classes.root}>\n                                <div className={classes.table_wrapper}>\n                                <Table data={details_individual}></Table>\n                                <Winner></Winner>\n                                </div>\n                                <Typography variant=\"h5\" gutterBottom color=\"primary\" align=\"center\">Chart</Typography>\n\n                              \n                                <ResponsiveContainer width=\"95%\" height={400}>\n                                <LineChart >\n\n                                <XAxis dataKey=\"event\" tick={false} allowDuplicatedCategory={false} />\n                                <YAxis dataKey=\"points\" />\n                                <Tooltip />\n                                <Legend />\n\n                             {details_individual.map(item=>(<Line type=\"monotone\" dataKey=\"points\" data={item.data} name={item.name} key={item.id} stroke={item.color} />))} \n                            </LineChart>\n                        </ResponsiveContainer> \n                            </div>\n                        )\n                    }\n                    return (\n                        <div className={classes.loading}>\n                        <CircularProgress />\n                      </div>\n                    )\n                }}\n            </DataFetcher>)\n\n\n    }\n}\n\nexport default withStyles(useStyles)(Index);","import React from 'react';\nimport './App.css';\nimport Table from './Table';\nimport Chart from  './Chart/Index.js';\nimport Winner from  './Winner';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Chart></Chart>\n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}